{"version":3,"sources":["images/pattern-bg.png","images/icon-arrow.svg","components/Search.js","components/Header.js","components/Body.js","components/Map.js","App.js","index.js"],"names":["mq","map","bp","SearchContainer","styled","form","SearchBox","input","SearchButton","button","Search","text","setText","fetchIpInfo","type","placeholder","value","onChange","event","target","onClick","src","arrow","alt","Head","div","bg","H1","h1","Header","Container","Label","p","Info","TextContainer","Body","ip","location","city","region","country","timezone","isp","Leaflet","Map","lat","lng","setMap","position","MapContainer","center","zoom","scrollWheelZoom","style","height","whenCreated","TileLayer","attribution","url","Marker","App","useState","setIp","useEffect","setView","e","a","preventDefault","axios","get","process","response","data","console","log","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d38fd01.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pattern-bg.a60a3c85.png\";","export default __webpack_public_path__ + \"static/media/icon-arrow.2eaaa5ee.svg\";","import React from 'react'\nimport styled from '@emotion/styled'\nimport \"@fontsource/rubik\"\n\nimport arrow from '../images/icon-arrow.svg'\n\n\n\n\n\n\nconst breakpoints = [992, 1440]\n\nconst mq = breakpoints.map(\n  bp => `@media (min-width: ${bp}px)`\n)\nconst SearchContainer = styled.form`\nmargin-top:10px;\n  position: relative;\n  text-align:center;\n  border:none;\n  box-shadow:0 20px 50px rgba(0, 0, 0, 0.2);\n`\nconst SearchBox = styled.input`\n  width:75vw;\n  border: none;\n  padding: 0 15px;\n  height:66px;\n \n  border-radius:.75rem;\n  font-family: \"Rubik\";\n  font-size: 1.15rem;\n  font-weight: 500;\n\n  ${mq[0]}{\n width:36vw;\n}\n`\nconst SearchButton = styled.button`\n  background: black;\n  position:absolute;\n  top:0;\n  bottom:0;\n  right:0; \n  border: none;\n  color: white;\n  padding: 0.5rem;\n  border-radius: 0 .75rem .75rem 0;\n  height:66px;\n  width:63px;\n\n  &:hover{\n   cursor: pointer;\n   background: hsl(0, 0%, 17%)\n  }\n`\n\nconst Search = ({text, setText, fetchIpInfo}) => {\n\n\nconst onChange = (event) => {\n    setText(event.target.value);\n  };\n\n\n return (\n  <SearchContainer>\n    <SearchBox type=\"text\"  placeholder=\"Enter an IP Address\"  value={text} onChange={onChange} />\n    <SearchButton type=\"submit\" onClick={fetchIpInfo}>\n       <img src={arrow} alt='arrow'/> \n    </SearchButton>\n    \n  </SearchContainer>\n )\n}\n\nexport default Search\n","import React from 'react'\nimport \"@fontsource/rubik\"\n\nimport styled from '@emotion/styled'\nimport bg from '../images/pattern-bg.png'\nimport Search from './Search'\n\nconst breakpoints = [500, 992, 1440]\n\nconst mq = breakpoints.map(\n  bp => `@media (min-width: ${bp}px)`\n)\n\nconst Head = styled.div`\nbackground-image:url(${bg});\nwidth:100vw;\nheight:333px;\nbackground-size: cover;\ndisplay:flex;\nalign-items:center;\nflex-direction:column;\n\n${mq[1]}{\n height:280px;\n}\n`\n\nconst H1 = styled.h1`\n      font-family: \"Rubik\";\n      color: white;\n      margin:0;\n      padding:0;\n      text-align:center;\n      padding:1.5rem;\n      font-size:1.75rem;\n      \n\n      ${mq[1]}{\n font-size:2rem;\n}\n`\n\nconst Header = ({text, setText, fetchIpInfo}) => {\n return (\n  <>\n   <Head>\n    <H1 >IP Address Tracker</H1>\n    <Search text={text} setText={setText} fetchIpInfo={fetchIpInfo}/>\n   </Head>\n  </>\n )\n}\n\nexport default Header\n","import React from 'react'\nimport styled from '@emotion/styled'\n\n\nconst breakpoints = [500, 992, 1440]\n\nconst mq = breakpoints.map(\n  bp => `@media (min-width: ${bp}px)`\n)\n\n\nconst Container = styled.div`\nwidth: 330px;\nheight:280px;\nbackground:white;\ndisplay: flex;\nflex-direction: column;\ntext-align:center;\njustify-content:center;\nalign-items:center;\npadding:0;\nmargin:0;\nborder-radius: .75rem;\nposition:absolute;\ntop:200px;\noverflow:hidden;\nbox-shadow:0 20px 80px rgba(0, 0, 0, 0.2);\nz-index:3;\n\n${mq[1]}{\n height:120px;\n width: 80vw;\n flex-direction: row;\n justify-content: space-evenly;\n\n text-align:left;\n}\n`\n\nconst Label = styled.p`\ncolor: darkgray;\nfont-size:.6rem;\nfont-weight:800;\npadding: 0;\nmargin: 0;\nletter-spacing:.05rem;\nmargin-bottom:5px;\n`\nconst Info = styled.p`\ncolor:hsl(0, 0%, 17%);\nfont-size:1.25rem;\nfont-weight:700;\nmargin:0;\npadding:0;\nmargin-bottom:20px;\n\n`\n\nconst TextContainer = styled.div`\n\n`\n\nconst Body = ({ip}) => {\n return (\n  <Container>\n  <TextContainer>\n    <Label>IP ADDRESS</Label>\n    <Info>{ip?.ip}</Info>\n  </TextContainer>\n  <TextContainer>\n   <Label>LOCATION</Label>\n   <Info>{`${ip?.location.city}, ${ip?.location.region}, ${ip?.location.country} `}</Info>\n  </TextContainer>\n  <TextContainer>\n   <Label>TIMEZONE</Label>\n    <Info>{`UTC${ip?.location.timezone}`}</Info>\n  </TextContainer>\n  <TextContainer>\n    <Label>ISP</Label>\n   <Info>{ip?.isp}</Info>\n  </TextContainer>\n  \n   \n   \n  \n  </Container>\n )\n}\n\nexport default Body\n\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { MapContainer, TileLayer, Marker} from '@monsonjeremy/react-leaflet'\n\n\nconst Leaflet = styled.div`\nheight:100vh;\nwidth:100vw;\nz-index: 1;\nmargin:0;\nbox-sizing:border-box;\npadding: 0;\n`\n\nfunction Map ({lat, lng, setMap}){\n  const position = [lat, lng]\n \n return (\n  <Leaflet>\n   <MapContainer  center={position} zoom={9} scrollWheelZoom={false}  style={{height: '100%'}} whenCreated={setMap} >\n    <TileLayer\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    />\n    <Marker position={position}/>\n  </MapContainer>\n  </Leaflet>\n )\n}\n\nexport default Map\n\n\n","import React, {useState, useEffect} from 'react'\nimport \"@fontsource/rubik\"\nimport Header from \"./components/Header\";\nimport axios from 'axios'\nimport Body from './components/Body';\nimport styled from '@emotion/styled'\nimport Map from './components/Map'\n\n\nconst {REACT_APP_IP_KEY} = process.env\n\nconst  App = () => {\n \n  const [text, setText] = useState('');\n  const [map, setMap] = useState(null)\n  const [ip, setIp] = useState({\n  ip: \"8.8.8.8\",\n  location: {\n    city:\"Mountain View\",\n    region: 'California',\n    country: 'US',\n    timezone: ' -07:00',\n    lat: 37.38605, \n    lng: -122.08385,\n   \n  },\n  isp: \"Google LLC\"\n})\n\nuseEffect(() => {\nconst handleSetView = () => {\nmap?.setView([ip.location.lat, ip.location.lng],9)\n}\nhandleSetView()\n},[ip, map])\n\n\nconst fetchIpInfo = async (e) => {\n      e.preventDefault();\n    try{\n      const response = await axios.get(`https://geo.ipify.org/api/v2/country,city?apiKey=${REACT_APP_IP_KEY}&ipAddress=${text}`);\n      setIp(response.data);\n    }catch(error){\n      console.log(error)\n      alert(`REMOVE AD-BLOCKER ${error}`)\n    }\n \n  }\n\n  return (\n    <Container>\n      <Header text={text} setText={setText} fetchIpInfo={fetchIpInfo} ip={ip} setIp={setIp}  />\n        <Body ip={ip}/>\n        <Map lat={ip.location.lat} lng={ip.location.lng} map={map} setMap={setMap}/>\n    </Container>\n  );\n\n}\nexport default App;\n\nconst Container = styled.div`\ndisplay:flex;\nflex-direction: column;\nalign-items:center\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n \n    <App />\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}